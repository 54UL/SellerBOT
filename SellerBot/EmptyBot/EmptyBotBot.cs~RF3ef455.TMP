// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System.Threading;
using System;
using System.Threading.Tasks;
using Microsoft.Bot.Builder;
using Microsoft.Bot.Schema;
using Microsoft.Extensions.Configuration;
using StaticAppStringDefines;
using Services;
using Microsoft.Bot.Builder.Dialogs;
using Microsoft.Bot.Builder.Dialogs.Choices;
using System.Collections.Generic;
using EmptyBot.Dialogs.Search;

namespace EmptyBot
{
    /// <summary>
    /// Represents a bot that processes incoming activities.
    /// For each user interaction, an instance of this class is created and the OnTurnAsync method is called.
    /// This is a Transient lifetime service. Transient lifetime services are created
    /// each time they're requested. Objects that are expensive to construct, or have a lifetime
    /// beyond a single turn, should be carefully managed.
    /// For example, the <see cref="MemoryStorage"/> object and associated
    /// <see cref="IStatePropertyAccessor{T}"/> object are created with a singleton lifetime.
    /// </summary>
    /// <seealso cref="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.1"/>
    public class EmptyBotBot : IBot
    {
        private DateTime logTime;
        private BotService _services;
        private PartsTechAPI _API_parts;
        private DialogSet _set;
        private SearchAccesors Accesor { get; set; }

        private async Task<DialogTurnResult> PromptForVid(WaterfallStepContext stepContext, CancellationToken cancellationToken)
        {
            // Prompt for the location.
            return await stepContext.PromptAsync(
                "vehicleVid",
                new PromptOptions
                {
                    Prompt = MessageFactory.Text("Which vid?")
                },
                cancellationToken);
        }

        private async Task<DialogTurnResult> PromptForKeyword(WaterfallStepContext stepContext, CancellationToken cancellationToken)
        {
            return await stepContext.PromptAsync(
                "vehiclePart",
                new PromptOptions
                {
                    Prompt = MessageFactory.Text("Please, insert a keyword")
                },
                cancellationToken);
        }

        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>                        
        public EmptyBotBot(IConfiguration configuration, BotService service, SearchAccesors searchData)
        {
            Accesor = searchData;
            var conversationState = searchData.ConversationState;
            _set = new DialogSet(conversationState.CreateProperty<DialogState>("dialogState"));
            _set.Add(new TextPrompt("vehicleVid"));
            _set.Add(new TextPrompt("vehiclePart"));
            WaterfallStep[] steps = new WaterfallStep[]
            {
                PromptForVid,
                PromptForKeyword
            };
            _set.Add(new WaterfallDialog("searchDialog", steps));
            _services = service;
            _API_parts = new PartsTechAPI();
        }

        /// <summary>
        /// Every conversation turn calls this method.
        /// </summary>
        /// <param name="turnContext">A <see cref="ITurnContext"/> containing all the data needed
        /// for processing this conversation turn. </param>
        /// <param name="cancellationToken">(Optional) A <see cref="CancellationToken"/> that can be used by other objects
        /// or threads to receive notice of cancellation.</param>
        /// <returns>A <see cref="Task"/> that represents the work queued to execute.</returns>
        /// <seealso cref="BotStateSet"/>
        /// <seealso cref="ConversationState"/>
        public async Task OnTurnAsync(ITurnContext turnContext, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Handle Message activity type, which is the main activity type for shown within a conversational interface
            // Message activities may contain text, speech, interactive cards, and binary or unknown attachments.
            // see https://aka.ms/about-bot-activity-message to learn more about the message and other activity types

            if (turnContext.Activity.Type == ActivityTypes.Message)
            {
                var dc = await _set.CreateContextAsync(turnContext, cancellationToken);

                var recognizerResult = await _services.LuisServices["SellerBot"].RecognizeAsync(turnContext, cancellationToken);
                var topIntent = recognizerResult?.GetTopScoringIntent();
                var context = await _set.CreateContextAsync(turnContext, cancellationToken);                

                switch (Enum.Parse<TextRecognizer.Intent>(topIntent.Value.intent))
                {
                    case TextRecognizer.Intent.StartSearch:
                        // await turnContext.SendActivityAsync(StaticAppStringDefines.GenericAnwsers.SearchMessage);
                        var result = await context.BeginDialogAsync("searchDialog", null, cancellationToken);

                        break;
                    case TextRecognizer.Intent.AddCart:
                        break;
                    case TextRecognizer.Intent.GetQuote:
                        break;
                    case TextRecognizer.Intent.Greetings:
                        await turnContext.SendActivityAsync(StaticAppStringDefines.GenericAnwsers.GreetingsMessage, cancellationToken: cancellationToken);
                        break;
                    case TextRecognizer.Intent.Help:
                        await turnContext.SendActivityAsync(StaticAppStringDefines.GenericAnwsers.HelpMessage, cancellationToken: cancellationToken);
                        break;
                    case TextRecognizer.Intent.Login:

                        break;
                    case TextRecognizer.Intent.None:
                        var dialogTurnResult = await dc.ContinueDialogAsync(cancellationToken);
                        break;
                    case TextRecognizer.Intent.RemoveCart:
                        break;
                    case TextRecognizer.Intent.RequestQuote:
                        string message_quote_info = _API_parts.getQuoteInfo();
                        await turnContext.SendActivityAsync("quote of " + message_quote_info, cancellationToken: cancellationToken);
                        break;
                }
            }
        }
    }
}
